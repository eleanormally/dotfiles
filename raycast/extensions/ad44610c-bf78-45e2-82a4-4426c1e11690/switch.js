"use strict";var d=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var S=(a,e)=>{for(var o in e)d(a,o,{get:e[o],enumerable:!0})},k=(a,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of A(e))!I.call(a,n)&&n!==o&&d(a,n,{get:()=>e[n],enumerable:!(r=v(e,n))||r.enumerable});return a};var C=a=>k(d({},"__esModule",{value:!0}),a);var M={};S(M,{default:()=>L});module.exports=C(M);var t=require("@raycast/api"),h=require("react");var i=require("@raycast/api"),p=require("react/jsx-runtime"),x=`
**Wondering why there aren't more layouts available?** The extension uses [keyboardSwitcher](https://github.com/Lutzifer/keyboardSwitcher "") by [Wolfgang Lutz](https://github.com/ "") to *list* and *switch* available layouts. However, *keyboardSwitcher* only supports listing and switching to layouts which are added as input source in the System Preferences. Essentially the extension replaces the *Input Sources* menu item.

To **add more layouts**, open the Keyboard Pane in the System Preferences (press enter \u21A9\uFE0E while reading this help text) and navigate to the *Input Sources* tab. On the left you\u2019ll see a list of your currently available layouts. Add more by pressing the + button. In the new dialogue, select a language on the left and confirm by pressing the *Add* button.`;function m(){return(0,p.jsx)(i.Detail,{markdown:x,actions:(0,p.jsx)(i.ActionPanel,{children:(0,p.jsx)(i.Action,{icon:i.Icon.Gear,title:"Open Keyboard Preferences",onAction:()=>(0,i.open)("/System/Library/PreferencePanes/Keyboard.prefPane")})})})}var f=require("child_process"),g=require("util"),l=require("@raycast/api"),y=(0,g.promisify)(f.exec),$=async()=>y(`/bin/chmod u+x ${l.environment.assetsPath}/keyboardSwitcher`),T=async()=>await Promise.all([y(`${l.environment.assetsPath}/keyboardSwitcher json`),y(`${l.environment.assetsPath}/keyboardSwitcher get`)]),c=class w{constructor(e,o){this.id=e;this.title=o}get active(){return this.title===c.activeInput}async activate(){if((await y(`${l.environment.assetsPath}/keyboardSwitcher select '${this.id}'`)).stdout.split(`
`)[1]!=="found")throw new Error(`Layout "${this.title}" Not Found`)}static async getAll(){await $();let[e,o]=await T();c.activeInput=o.stdout.split(`
`)[0];let r=JSON.parse(e.stdout),n=[];for(let u of r)n.push(new w(u.arg,u.title));return n.sort((u,P)=>u.title.localeCompare(P.title))}static async setNextInput(){let e=await c.getAll(),o=e[0];for(let r=0;r<e.length;r++)if(e[r].active){o=r+1<e.length?e[r+1]:o;break}return await o.activate(),o}};var s=require("react/jsx-runtime");function b(a,e){return{title:"An Error Occured",message:a,style:t.Toast.Style.Failure,primaryAction:{title:"Copy Error",onAction:()=>t.Clipboard.copy(`${e}`),shortcut:{modifiers:["cmd","shift"],key:"c"}}}}async function E(a){try{await a.activate(),await Promise.all([(0,t.showHUD)(`\u2328\uFE0F Activated '${a.title}' Layout`),(0,t.popToRoot)(),(0,t.closeMainWindow)()])}catch(e){await(0,t.showToast)(b("Couldn't Activate Layout",`${e}`))}}function L(){let[a,e]=(0,h.useState)([]);return(0,h.useEffect)(()=>{(async()=>{try{e(await c.getAll())}catch(o){await(0,t.showToast)(b("Couldn't Get Layouts",`${o}`))}})()},[]),(0,s.jsx)(t.List,{isLoading:a.length===0,searchBarPlaceholder:"Search available layout...",children:a.map(o=>(0,s.jsx)(t.List.Item,{icon:o.active?{source:t.Icon.Checkmark,tintColor:t.Color.Green}:t.Icon.Circle,title:o.title,accessoryTitle:o.active?"Current Layout":"",keywords:[o.id],actions:(0,s.jsxs)(t.ActionPanel,{children:[(0,s.jsx)(t.Action,{icon:t.Icon.Checkmark,title:"Activate",onAction:()=>E(o)}),(0,s.jsx)(t.Action,{icon:t.Icon.Gear,title:"Keyboard Preferences",onAction:()=>(0,t.open)("/System/Library/PreferencePanes/Keyboard.prefPane")}),(0,s.jsx)(t.Action.Push,{icon:t.Icon.QuestionMark,title:"Get More Layouts",target:(0,s.jsx)(m,{})})]})},o.id))})}0&&(module.exports={});
