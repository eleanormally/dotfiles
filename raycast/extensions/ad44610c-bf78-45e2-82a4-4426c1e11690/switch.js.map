{
  "version": 3,
  "sources": ["../src/switch.tsx", "../src/Help.tsx", "../src/model/LayoutManager.ts"],
  "sourcesContent": ["import {\n  ActionPanel,\n  Action,\n  Icon,\n  List,\n  showToast,\n  Toast,\n  Color,\n  showHUD,\n  popToRoot,\n  closeMainWindow,\n  open,\n  Clipboard,\n} from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { Help } from \"./Help\";\nimport { LayoutManager } from \"./model/LayoutManager\";\nimport { ILayout } from \"./model/interfaces\";\n\nfunction toastErrorOptions(message: string, error: string): Toast.Options {\n  return {\n    title: \"An Error Occured\",\n    message,\n    style: Toast.Style.Failure,\n    primaryAction: {\n      title: \"Copy Error\",\n      onAction: () => Clipboard.copy(`${error}`),\n      shortcut: { modifiers: [\"cmd\", \"shift\"], key: \"c\" },\n    },\n  };\n}\n\nasync function handleLayoutSwitch(source: ILayout) {\n  try {\n    await source.activate();\n    await Promise.all([showHUD(`\u2328\uFE0F Activated '${source.title}' Layout`), popToRoot(), closeMainWindow()]);\n  } catch (e) {\n    await showToast(toastErrorOptions(\"Couldn't Activate Layout\", `${e}`));\n  }\n}\n\nexport default function Command() {\n  const [layouts, setLayouts] = useState<ILayout[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLayouts(await LayoutManager.getAll());\n      } catch (e) {\n        await showToast(toastErrorOptions(\"Couldn't Get Layouts\", `${e}`));\n      }\n    })();\n  }, []);\n\n  return (\n    <List isLoading={layouts.length === 0} searchBarPlaceholder=\"Search available layout...\">\n      {layouts.map((source) => (\n        <List.Item\n          key={source.id}\n          icon={source.active ? { source: Icon.Checkmark, tintColor: Color.Green } : Icon.Circle}\n          title={source.title}\n          accessoryTitle={source.active ? \"Current Layout\" : \"\"}\n          keywords={[source.id]}\n          actions={\n            <ActionPanel>\n              <Action icon={Icon.Checkmark} title=\"Activate\" onAction={() => handleLayoutSwitch(source)} />\n              <Action\n                icon={Icon.Gear}\n                title=\"Keyboard Preferences\"\n                onAction={() => open(\"/System/Library/PreferencePanes/Keyboard.prefPane\")}\n              />\n              <Action.Push icon={Icon.QuestionMark} title=\"Get More Layouts\" target={<Help />} />\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n", "import { Action, ActionPanel, Detail, Icon, open } from \"@raycast/api\";\n\nconst helpText = `\n**Wondering why there aren't more layouts available?** The extension uses [keyboardSwitcher](https://github.com/Lutzifer/keyboardSwitcher \"\") by [Wolfgang Lutz](https://github.com/ \"\") to *list* and *switch* available layouts. However, *keyboardSwitcher* only supports listing and switching to layouts which are added as input source in the System Preferences. Essentially the extension replaces the *Input Sources* menu item.\n\nTo **add more layouts**, open the Keyboard Pane in the System Preferences (press enter \u21A9\uFE0E while reading this help text) and navigate to the *Input Sources* tab. On the left you\u2019ll see a list of your currently available layouts. Add more by pressing the + button. In the new dialogue, select a language on the left and confirm by pressing the *Add* button.`;\n\nexport function Help() {\n  return (\n    <Detail\n      markdown={helpText}\n      actions={\n        <ActionPanel>\n          <Action\n            icon={Icon.Gear}\n            title=\"Open Keyboard Preferences\"\n            onAction={() => open(\"/System/Library/PreferencePanes/Keyboard.prefPane\")}\n          />\n        </ActionPanel>\n      }\n    />\n  );\n}\n", "import { exec as Exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { environment } from \"@raycast/api\";\n\nimport { ILayout, ILayoutManager } from \"./interfaces\";\n\nconst exec = promisify(Exec);\n\nconst setPermissions = async () => {\n  return exec(`/bin/chmod u+x ${environment.assetsPath}/keyboardSwitcher`);\n};\n\nconst fetchData = async (): Promise<{ stdout: string; stderr: string }[]> => {\n  return await Promise.all([\n    exec(`${environment.assetsPath}/keyboardSwitcher json`),\n    exec(`${environment.assetsPath}/keyboardSwitcher get`),\n  ]);\n};\n\nexport const LayoutManager: ILayoutManager = class Layout implements ILayout {\n  static activeInput?: string;\n\n  private constructor(readonly id: string, readonly title: string) {}\n\n  get active(): boolean {\n    return this.title === LayoutManager.activeInput;\n  }\n\n  public async activate(): Promise<void> {\n    const result = await exec(`${environment.assetsPath}/keyboardSwitcher select '${this.id}'`);\n    const status = result.stdout.split(\"\\n\")[1];\n    if (status === \"found\") {\n      return;\n    } else {\n      throw new Error(`Layout \"${this.title}\" Not Found`);\n    }\n  }\n\n  static async getAll() {\n    await setPermissions();\n\n    // Fetch data\n    const [inputsResult, activeResult] = await fetchData();\n\n    // Set active source\n    LayoutManager.activeInput = activeResult.stdout.split(\"\\n\")[0];\n\n    // Create instances\n    const rawSources = JSON.parse(inputsResult.stdout);\n    const sources: Array<ILayout> = [];\n    for (const obj of rawSources) {\n      sources.push(new Layout(obj.arg, obj.title));\n    }\n    return sources.sort((a, b) => a.title.localeCompare(b.title));\n  }\n\n  static async setNextInput() {\n    const allLayouts = await LayoutManager.getAll();\n\n    // Select the input right after the active layout or the first one if the active layout is the last one\n    let selected: ILayout = allLayouts[0];\n    for (let i = 0; i < allLayouts.length; i++) {\n      if (allLayouts[i].active) {\n        selected = i + 1 < allLayouts.length ? allLayouts[i + 1] : selected;\n        break;\n      }\n    }\n\n    await selected.activate();\n    return selected;\n  }\n};\n"],
  "mappings": "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",
  "names": ["switch_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_jsx_runtime", "helpText", "Help", "import_child_process", "import_util", "import_api", "exec", "Exec", "setPermissions", "fetchData", "LayoutManager", "Layout", "id", "title", "inputsResult", "activeResult", "rawSources", "sources", "obj", "a", "b", "allLayouts", "selected", "i", "import_jsx_runtime", "toastErrorOptions", "message", "error", "handleLayoutSwitch", "source", "Command", "layouts", "setLayouts", "LayoutManager", "e", "Help"]
}
