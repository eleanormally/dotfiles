{
  "version": 3,
  "sources": ["../src/toggle.ts", "../src/model/LayoutManager.ts"],
  "sourcesContent": ["import { showHUD } from \"@raycast/api\";\nimport { LayoutManager } from \"./model/LayoutManager\";\n\nexport default async function main() {\n  const selectedInput = await LayoutManager.setNextInput();\n  await showHUD(`\u2328\uFE0F Activated '${selectedInput.title}' Layout`);\n}\n", "import { exec as Exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { environment } from \"@raycast/api\";\n\nimport { ILayout, ILayoutManager } from \"./interfaces\";\n\nconst exec = promisify(Exec);\n\nconst setPermissions = async () => {\n  return exec(`/bin/chmod u+x ${environment.assetsPath}/keyboardSwitcher`);\n};\n\nconst fetchData = async (): Promise<{ stdout: string; stderr: string }[]> => {\n  return await Promise.all([\n    exec(`${environment.assetsPath}/keyboardSwitcher json`),\n    exec(`${environment.assetsPath}/keyboardSwitcher get`),\n  ]);\n};\n\nexport const LayoutManager: ILayoutManager = class Layout implements ILayout {\n  static activeInput?: string;\n\n  private constructor(readonly id: string, readonly title: string) {}\n\n  get active(): boolean {\n    return this.title === LayoutManager.activeInput;\n  }\n\n  public async activate(): Promise<void> {\n    const result = await exec(`${environment.assetsPath}/keyboardSwitcher select '${this.id}'`);\n    const status = result.stdout.split(\"\\n\")[1];\n    if (status === \"found\") {\n      return;\n    } else {\n      throw new Error(`Layout \"${this.title}\" Not Found`);\n    }\n  }\n\n  static async getAll() {\n    await setPermissions();\n\n    // Fetch data\n    const [inputsResult, activeResult] = await fetchData();\n\n    // Set active source\n    LayoutManager.activeInput = activeResult.stdout.split(\"\\n\")[0];\n\n    // Create instances\n    const rawSources = JSON.parse(inputsResult.stdout);\n    const sources: Array<ILayout> = [];\n    for (const obj of rawSources) {\n      sources.push(new Layout(obj.arg, obj.title));\n    }\n    return sources.sort((a, b) => a.title.localeCompare(b.title));\n  }\n\n  static async setNextInput() {\n    const allLayouts = await LayoutManager.getAll();\n\n    // Select the input right after the active layout or the first one if the active layout is the last one\n    let selected: ILayout = allLayouts[0];\n    for (let i = 0; i < allLayouts.length; i++) {\n      if (allLayouts[i].active) {\n        selected = i + 1 < allLayouts.length ? allLayouts[i + 1] : selected;\n        break;\n      }\n    }\n\n    await selected.activate();\n    return selected;\n  }\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAwB,wBCAxB,IAAAC,EAA6B,yBAC7BC,EAA0B,gBAC1BC,EAA4B,wBAItBC,KAAO,aAAU,EAAAC,IAAI,EAErBC,EAAiB,SACdF,EAAK,kBAAkB,cAAY,6BAA6B,EAGnEG,EAAY,SACT,MAAM,QAAQ,IAAI,CACvBH,EAAK,GAAG,cAAY,kCAAkC,EACtDA,EAAK,GAAG,cAAY,iCAAiC,CACvD,CAAC,EAGUI,EAAgC,MAAMC,CAA0B,CAGnE,YAAqBC,EAAqBC,EAAe,CAApC,QAAAD,EAAqB,WAAAC,CAAgB,CAElE,IAAI,QAAkB,CACpB,OAAO,KAAK,QAAUH,EAAc,WACtC,CAEA,MAAa,UAA0B,CAGrC,IAFe,MAAMJ,EAAK,GAAG,cAAY,uCAAuC,KAAK,KAAK,GACpE,OAAO,MAAM;AAAA,CAAI,EAAE,KAC1B,QAGb,MAAM,IAAI,MAAM,WAAW,KAAK,kBAAkB,CAEtD,CAEA,aAAa,QAAS,CACpB,MAAME,EAAe,EAGrB,GAAM,CAACM,EAAcC,CAAY,EAAI,MAAMN,EAAU,EAGrDC,EAAc,YAAcK,EAAa,OAAO,MAAM;AAAA,CAAI,EAAE,GAG5D,IAAMC,EAAa,KAAK,MAAMF,EAAa,MAAM,EAC3CG,EAA0B,CAAC,EACjC,QAAWC,KAAOF,EAChBC,EAAQ,KAAK,IAAIN,EAAOO,EAAI,IAAKA,EAAI,KAAK,CAAC,EAE7C,OAAOD,EAAQ,KAAK,CAACE,EAAGC,IAAMD,EAAE,MAAM,cAAcC,EAAE,KAAK,CAAC,CAC9D,CAEA,aAAa,cAAe,CAC1B,IAAMC,EAAa,MAAMX,EAAc,OAAO,EAG1CY,EAAoBD,EAAW,GACnC,QAASE,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IACrC,GAAIF,EAAWE,GAAG,OAAQ,CACxBD,EAAWC,EAAI,EAAIF,EAAW,OAASA,EAAWE,EAAI,GAAKD,EAC3D,KACF,CAGF,aAAMA,EAAS,SAAS,EACjBA,CACT,CACF,EDpEA,eAAOE,GAA8B,CACnC,IAAMC,EAAgB,MAAMC,EAAc,aAAa,EACvD,QAAM,WAAQ,2BAAiBD,EAAc,eAAe,CAC9D",
  "names": ["toggle_exports", "__export", "main", "__toCommonJS", "import_api", "import_child_process", "import_util", "import_api", "exec", "Exec", "setPermissions", "fetchData", "LayoutManager", "Layout", "id", "title", "inputsResult", "activeResult", "rawSources", "sources", "obj", "a", "b", "allLayouts", "selected", "i", "main", "selectedInput", "LayoutManager"]
}
