{
  "version": 3,
  "sources": ["../src/index.tsx"],
  "sourcesContent": ["import { showHUD, Clipboard } from \"@raycast/api\";\nimport { randomInt } from \"crypto\";\n\nexport default async function Command() {\n  const pass = generate();\n  await Clipboard.copy(pass, { transient: true });\n\n  await showHUD(\"Password copied to clipboard\");\n}\n\nfunction generate() {\n  const lowerConsonants = \"bcdfghjkmnpqrstvwxz\".split(\"\");\n  const upperConsonants = \"BCDFGHJKLMNPQRSTVWXZ\".split(\"\");\n  const lowerVowels = \"aeiouy\".split(\"\");\n  const upperVowels = \"AEUY\".split(\"\");\n\n  const numberPositions: { [index: number]: number } = {\n    1: 1,\n    2: 7,\n    3: 13,\n    4: 6,\n    5: 12,\n    6: 18,\n  };\n\n  // choose position of number and upper case letter\n  const numPosKey = randomInt(2, 7);\n  const NumberPosition = numberPositions[numPosKey];\n\n  let uppercasePos = randomInt(1, 19);\n  if (uppercasePos === numPosKey) {\n    const rnd = randomInt(1, 10);\n\n    if (uppercasePos > 9) {\n      uppercasePos -= rnd;\n    } else {\n      uppercasePos += rnd;\n    }\n  }\n\n  // pick characters\n  let count = 1;\n  let passwordSection = \"\";\n  for (let i = 1; i <= 18; i++) {\n    count += 1;\n\n    if (NumberPosition === i) {\n      if (NumberPosition < 4) {\n        count -= 1;\n      }\n      passwordSection += randomInt(1, 10);\n    } else {\n      if (count % 3 === 0) {\n        // vowel\n        if (uppercasePos === i) {\n          passwordSection += randomFromArray(upperVowels);\n        } else {\n          passwordSection += randomFromArray(lowerVowels);\n        }\n      } else {\n        // consonant\n        if (uppercasePos === i) {\n          passwordSection += randomFromArray(upperConsonants);\n        } else {\n          passwordSection += randomFromArray(lowerConsonants);\n        }\n      }\n    }\n\n    // separate characters into sections\n    if (i !== 18 && i % 6 === 0) {\n      passwordSection += \"-\";\n    }\n  }\n\n  return passwordSection;\n}\n\nfunction randomFromArray(array: any[]) {\n  return array[randomInt(1, array.length)];\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAmC,wBACnCC,EAA0B,kBAE1B,eAAOH,GAAiC,CACtC,IAAMI,EAAOC,EAAS,EACtB,MAAM,YAAU,KAAKD,EAAM,CAAE,UAAW,EAAK,CAAC,EAE9C,QAAM,WAAQ,8BAA8B,CAC9C,CAEA,SAASC,GAAW,CAClB,IAAMC,EAAkB,sBAAsB,MAAM,EAAE,EAChDC,EAAkB,uBAAuB,MAAM,EAAE,EACjDC,EAAc,SAAS,MAAM,EAAE,EAC/BC,EAAc,OAAO,MAAM,EAAE,EAE7BC,EAA+C,CACnD,EAAG,EACH,EAAG,EACH,EAAG,GACH,EAAG,EACH,EAAG,GACH,EAAG,EACL,EAGMC,KAAY,aAAU,EAAG,CAAC,EAC1BC,EAAiBF,EAAgBC,GAEnCE,KAAe,aAAU,EAAG,EAAE,EAClC,GAAIA,IAAiBF,EAAW,CAC9B,IAAMG,KAAM,aAAU,EAAG,EAAE,EAEvBD,EAAe,EACjBA,GAAgBC,EAEhBD,GAAgBC,CAEpB,CAGA,IAAIC,EAAQ,EACRC,EAAkB,GACtB,QAASC,EAAI,EAAGA,GAAK,GAAIA,IACvBF,GAAS,EAELH,IAAmBK,GACjBL,EAAiB,IACnBG,GAAS,GAEXC,MAAmB,aAAU,EAAG,EAAE,GAE9BD,EAAQ,IAAM,EAEZF,IAAiBI,EACnBD,GAAmBE,EAAgBT,CAAW,EAE9CO,GAAmBE,EAAgBV,CAAW,EAI5CK,IAAiBI,EACnBD,GAAmBE,EAAgBX,CAAe,EAElDS,GAAmBE,EAAgBZ,CAAe,EAMpDW,IAAM,IAAMA,EAAI,IAAM,IACxBD,GAAmB,KAIvB,OAAOA,CACT,CAEA,SAASE,EAAgBC,EAAc,CACrC,OAAOA,KAAM,aAAU,EAAGA,EAAM,MAAM,EACxC",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_crypto", "pass", "generate", "lowerConsonants", "upperConsonants", "lowerVowels", "upperVowels", "numberPositions", "numPosKey", "NumberPosition", "uppercasePos", "rnd", "count", "passwordSection", "i", "randomFromArray", "array"]
}
